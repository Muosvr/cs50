video: speller
speller.c
calls load on the dictionary file
dictionary contains valid words, one per line
calls check on each word in the text file and prints all misspelled words
calls size to determine number of words in dictionary
calls unload to free up memory

TODO
load
loads the dictionary
check
checks if a given word is in the dictionary
size
returns the number of words in the dictionary
unload
frees the dictionary from memory

video: speller / load
hash tables
a hash table is an array of linked list

e.g.
typeof struct node
{
	char word[LENGTH +1]
	struct node *next;
}
node;

//to create a node
node *node1 = mallock(sizeof(node));
node *node2 = mallock(sizeof(node));

strcpy(node1 -> word, “Hello”); //use arrow notation to access word in node1
strcpy(node1 -> word, “World”);
node1 -> next = node2; //use arrow notation to access next in node 1 and point to node2

//to create a hash table
node *hashtable[50]; //assuming node struct has already been defined

Make a new word in the dictionary(hash table)
e.g.
while (fscanf(file, “%s”, word) != EOF)
{
…
}

//inside the while loop malloc a node * for each new word

node *new_node = malloc(sizeof(node));
if (new_node == NULL) //check if malloc succeeded
{
	unload();
	return false;
}

//if succeed
strcpy(new_node->word, word);

insert into a linked list
new_node -> next = head;
head = new_node;

hash function
takes a string
returns an index
index < the number of buckets
deterministic
the same value needs to map to the same bucket every time

hash the word
new_node -> word has the word from the dictionary
hashing new_node-> word will give us the index of a bucket in the hash table
insert into the linked list

tries
every node contains an array of node pointers
one for every letter in the alphabet +’\’’ //use backward slash to parse the ‘ correctly
each element in the array points to another node
if that node is NULL, then that letter isn’t the next letter of any word in that sequence
every node indicates whether it’s the last character of a word

e.g.
typedef struct node
{
	bool is_word;
	struct node *children[27];
}
node;

node *root;

load
for every dictionary word, iterate through the trie
12:44


